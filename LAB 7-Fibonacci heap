FIBONACCI HEAP IMPLEMENTATION

package Lab7;

import java.util.*;

class FibonacciHeapNode {
    int key;
    int degree;
    boolean marked;
    FibonacciHeapNode parent;
    FibonacciHeapNode child;
    FibonacciHeapNode left;
    FibonacciHeapNode right;

    FibonacciHeapNode(int key) {
        this.key = key;
        degree = 0;
        marked = false;
        parent = null;
        child = null;
        left = this;
        right = this;
    }
}

public class FibonacciHeap {
    private FibonacciHeapNode min;
    private int size;

    public FibonacciHeap() {
        min = null;
        size = 0;
    }

    public boolean isEmpty() {
        return min == null;
    }

    public void insert(int key) {
        FibonacciHeapNode node = new FibonacciHeapNode(key);
        if (min != null) {
            node.left = min;
            node.right = min.right;
            min.right = node;
            node.right.left = node;
            if (key < min.key) {
                min = node;
            }
        } else {
            min = node;
        }
        size++;
    }

    public int getMin() {
        return min.key;
    }

    public int removeMin() {
        FibonacciHeapNode oldMin = min;
        if (oldMin != null) {
            int key = oldMin.key;
            if (oldMin.child != null) {
                FibonacciHeapNode child = oldMin.child;
                do {
                    FibonacciHeapNode next = child.right;
                    min.left.right = child;
                    child.right = min.right;
                    min.right.left = child;
                    child.left = min.left;
                    child.parent = null;
                    child = next;
                } while (child != oldMin.child);
            }
            oldMin.left.right = oldMin.right;
            oldMin.right.left = oldMin.left;
            if (oldMin == oldMin.right) {
                min = null;
            } else {
                min = oldMin.right;
                consolidate();
            }
            size--;
            return key;
        }
        return -1;
    }

    private void consolidate() {
        int maxDegree = (int) Math.floor(Math.log(size) / Math.log(2));
        List<FibonacciHeapNode> rootList = new ArrayList<>(maxDegree + 1);
        for (int i = 0; i <= maxDegree; i++) {
            rootList.add(null);
        }

        while (min != null) {
            FibonacciHeapNode x = extractMin();
            int degree = x.degree;
            while (rootList.get(degree) != null) {
                FibonacciHeapNode y = rootList.get(degree);
                if (x.key > y.key) {
                    FibonacciHeapNode temp = x;
                    x = y;
                    y = temp;
                }
                link(y, x);
                rootList.set(degree, null);
                degree++;
            }
            rootList.set(degree, x);
        }

        min = null;
        for (FibonacciHeapNode node : rootList) {
            if (node != null) {
                if (min == null) {
                    min = node;
                } else {
                    node.left.right = node.right;
                    node.right.left = node.left;
                    node.left = min;
                    node.right = min.right;
                    min.right = node;
                    node.right.left = node;
                    if (node.key < min.key) {
                        min = node;
                    }
                }
            }
        }
    }

    private void link(FibonacciHeapNode y, FibonacciHeapNode x) {
        y.left.right = y.right;
        y.right.left = y.left;
        y.parent = x;
        if (x.child == null) {
            x.child = y;
            y.right = y;
            y.left = y;
        } else {
            y.left = x.child;
            y.right = x.child.right;
            x.child.right = y;
            y.right.left = y;
        }
        x.degree++;
        y.marked = false;
    }

    private FibonacciHeapNode extractMin() {
        FibonacciHeapNode oldMin = min;
        if (oldMin != null) {
            FibonacciHeapNode child = oldMin.child;
            if (child != null) {
                do {
                    FibonacciHeapNode next = child.right;
                    min.left.right = child;
                    child.right = min.right;
                    min.right.left = child;
                    child.left = min.left;
                    child.parent = null;
                    child = next;
                } while (child != oldMin.child);
            }
            oldMin.left.right = oldMin.right;
            oldMin.right.left = oldMin.left;
            if (oldMin == oldMin.right) {
                min = null;
            } else {
                min = oldMin.right;
                consolidate();
            }
        }
        return oldMin;
    }

    public static void main(String[] args) {
        FibonacciHeap heap = new FibonacciHeap();
        heap.insert(5);
        heap.insert(3);
        heap.insert(8);
        heap.insert(2);
        heap.insert(1);

        System.out.println("Minimum element: " + heap.getMin());
    }
}


IMPLEMENTATION OF ITERATIVE FUNCTION FOR TREE TRAVERSAL AND FIBONACCI

package Lab2;

import java.util.Stack;

//Definition for a binary tree node.
class TreeNode {
 int val;
 TreeNode left;
 TreeNode right;

 TreeNode(int x) {
     val = x;
 }
}

public class TreeTraversalIterative {

 // Iterative inorder traversal
 public static void inorderTraversal(TreeNode root) {
     if (root == null)
         return;

     Stack<TreeNode> stack = new Stack<>();
     TreeNode current = root;

     while (current != null || !stack.isEmpty()) {
         while (current != null) {
             stack.push(current);
             current = current.left;
         }

         current = stack.pop();
         System.out.print(current.val + " ");
         current = current.right;
     }
 }

 // Iterative preorder traversal
 public static void preorderTraversal(TreeNode root) {
     if (root == null)
         return;

     Stack<TreeNode> stack = new Stack<>();
     stack.push(root);

     while (!stack.isEmpty()) {
         TreeNode current = stack.pop();
         System.out.print(current.val + " ");

         if (current.right != null)
             stack.push(current.right);
         if (current.left != null)
             stack.push(current.left);
     }
 }

 // Iterative postorder traversal
 public static void postorderTraversal(TreeNode root) {
     if (root == null)
         return;

     Stack<TreeNode> stack = new Stack<>();
     stack.push(root);
     Stack<TreeNode> output = new Stack<>();

     while (!stack.isEmpty()) {
         TreeNode current = stack.pop();
         output.push(current);

         if (current.left != null)
             stack.push(current.left);
         if (current.right != null)
             stack.push(current.right);
     }

     while (!output.isEmpty()) {
         System.out.print(output.pop().val + " ");
     }
 }

 public static void main(String[] args) {
     TreeNode root = new TreeNode(1);
     root.left = new TreeNode(2);
     root.right = new TreeNode(3);
     root.left.left = new TreeNode(4);
     root.left.right = new TreeNode(5);

     System.out.println("Inorder traversal:");
     inorderTraversal(root);

     System.out.println("\nPreorder traversal:");
     preorderTraversal(root);

     System.out.println("\nPostorder traversal:");
     postorderTraversal(root);
 }
}

package Lab2;

import java.util.Scanner;

public class FibonacciIterative {

    public static int fibonacci(int n) {
        if (n <= 1)
            return n;

        int fibNMinus2 = 0, fibNMinus1 = 1, fibN = 0;
        for (int i = 2; i <= n; i++) {
            fibN = fibNMinus1 + fibNMinus2;
            fibNMinus2 = fibNMinus1;
            fibNMinus1 = fibN;
        }
        return fibN;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number: ");
        int n = scanner.nextInt();
        scanner.close();

        System.out.println("Fibonacci series: " + fibonacci(n));
    }
}

DIJKSTRAS ALGORITHM & BELLMAN FORD ALGORITHM

package Lab10;

import java.util.*;

class Graph {
    private int V; // Number of vertices
    private List<List<Node>> adj;

    static class Node {
        int dest;
        int weight;

        Node(int dest, int weight) {
            this.dest = dest;
            this.weight = weight;
        }
    }

    Graph(int V) {
        this.V = V;
        adj = new ArrayList<>(V);
        for (int i = 0; i < V; i++)
            adj.add(new LinkedList<>());
    }

    void addEdge(int source, int dest, int weight) {
        Node node = new Node(dest, weight);
        adj.get(source).add(node);
    }

    void dijkstra(int source) {
        int[] dist = new int[V];
        boolean[] visited = new boolean[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[source] = 0;

        PriorityQueue<Node> pq = new PriorityQueue<>(V, Comparator.comparingInt(node -> node.weight));
        pq.add(new Node(source, 0));

        while (!pq.isEmpty()) {
            int u = pq.poll().dest;

            visited[u] = true;

            for (Node neighbor : adj.get(u)) {
                int v = neighbor.dest;
                int weight = neighbor.weight;

                if (!visited[v] && dist[u] != Integer.MAX_VALUE && dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                    pq.add(new Node(v, dist[v]));
                }
            }
        }

        printSolution(dist);
    }

    private void printSolution(int[] dist) {
        System.out.println("Vertex \t\t Distance from Source");
        for (int i = 0; i < V; i++)
            System.out.println(i + " \t\t " + dist[i]);
    }
}

public class DijkstraAlgorithm {
    public static void main(String[] args) {
        int V = 5;
        Graph graph = new Graph(V);

        graph.addEdge(0, 1, 9);
        graph.addEdge(0, 2, 6);
        graph.addEdge(0, 3, 5);
        graph.addEdge(0, 4, 3);
        graph.addEdge(2, 1, 2);
        graph.addEdge(2, 3, 4);

        graph.dijkstra(0);
    }
}

package Lab10b;

import java.util.*;

class Edge {
    int source, destination, weight;

    public Edge() {
        source = destination = weight = 0;
    }
}

class Graph {
    int V, E;
    Edge[] edges;

    Graph(int v, int e) {
        V = v;
        E = e;
        edges = new Edge[e];
        for (int i = 0; i < e; ++i)
            edges[i] = new Edge();
    }

    void BellmanFord(Graph graph, int source) {
        int V = graph.V;
        int E = graph.E;
        int[] dist = new int[V];

        // Initialize distances from source to all other vertices as INFINITE
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[source] = 0;

        // Relax all edges V-1 times
        for (int i = 1; i < V; ++i) {
            for (int j = 0; j < E; ++j) {
                int u = graph.edges[j].source;
                int v = graph.edges[j].destination;
                int weight = graph.edges[j].weight;
                if (dist[u] != Integer.MAX_VALUE && dist[u] + weight < dist[v])
                    dist[v] = dist[u] + weight;
            }
        }

        // Check for negative-weight cycles
        for (int j = 0; j < E; ++j) {
            int u = graph.edges[j].source;
            int v = graph.edges[j].destination;
            int weight = graph.edges[j].weight;
            if (dist[u] != Integer.MAX_VALUE && dist[u] + weight < dist[v]) {
                System.out.println("Graph contains negative weight cycle");
                return;
            }
        }

        printSolution(dist, V);
    }

    void printSolution(int[] dist, int V) {
        System.out.println("Vertex Distance from Source");
        for (int i = 0; i < V; ++i)
            System.out.println(i + "\t\t" + dist[i]);
    }
}

public class BellmanFordAlgorithm {
    public static void main(String[] args) {
        int V = 5; // Number of vertices in graph
        int E = 8; // Number of edges in graph

        Graph graph = new Graph(V, E);

        // Add edge 0-1 (source vertex, destination vertex, weight)
        graph.edges[0].source = 0;
        graph.edges[0].destination = 1;
        graph.edges[0].weight = -1;

        // Add edge 0-2
        graph.edges[1].source = 0;
        graph.edges[1].destination = 2;
        graph.edges[1].weight = 4;

        // Add edge 1-2
        graph.edges[2].source = 1;
        graph.edges[2].destination = 2;
        graph.edges[2].weight = 3;

        // Add edge 1-3
        graph.edges[3].source = 1;
        graph.edges[3].destination = 3;
        graph.edges[3].weight = 2;

        // Add edge 1-4
        graph.edges[4].source = 1;
        graph.edges[4].destination = 4;
        graph.edges[4].weight = 2;

        // Add edge 3-2
        graph.edges[5].source = 3;
        graph.edges[5].destination = 2;
        graph.edges[5].weight = 5;

        // Add edge 3-1
        graph.edges[6].source = 3;
        graph.edges[6].destination = 1;
        graph.edges[6].weight = 1;

        // Add edge 4-3
        graph.edges[7].source = 4;
        graph.edges[7].destination = 3;
        graph.edges[7].weight = -3;

        graph.BellmanFord(graph, 0);
    }
}

